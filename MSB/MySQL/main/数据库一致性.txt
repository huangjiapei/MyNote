【JVM锁】
【数据库悲观锁】
【乐观锁】****
【不查直接更新】
1、问题：多线程同时操作同一条数据，出现数据不一致情况【血量】
物品W现在库存剩余1个,  用户P1,P2同时购买.则只有1人能购买成功。(前提是不允许超卖)
秒杀也是类似的情况, 只有1件商品,N个用户同时抢购,只有1人能抢到。
这里不谈秒杀设计,不谈使用队列等使请求串行化,就谈下怎么用锁来保证数据正确。

****************************************************************************************************************
【每线程对应一个connection，利用Java中的ThreadLocal为每个线程保存一个Connection对象】
2、解决方案
1）代码同步, 例如使用 synchronized ,lock 等同步方法
2）使用数据库锁, select xx for update
3）使用分布式锁(zookeeper,redis等)
4）不查询,直接更新  update table set surplus = (surplus - buyQuantity) where id = xx and (surplus - buyQuantity) > 0
5）使用CAS, update table set surplus = aa where id = xx and version = y

****************************************************************************************************************
2.1 代码同步
（1）实现方法
        1）在方法声明加上synchronized关键字,实现同步,这样2个用户同时购买,到buy方法时候同步执行,第2个用户执行的时候,会库存不足.
        2）使用spring 声明式事务管理，事务传播机制使用默认的(PROPAGATION_REQUIRED)
        3）项目分层为controller-service-dao 3层, 事务管理在service层
（2）问题
        1）synchronized 作用范围是单个jvm实例, 如果做了集群,分布式等,就没用了
        2）单个jvm时,synchronized也不能保证多个数据库事务的隔离性。这与代码中的事务传播级别,数据库的事务隔离级别,加锁时机等相关。
	2.1）RR(Repeatable Read)级别。mysql默认的是RR,事务开启后,不会读取到其他事务提交的数据
                         spring的事务开启和提交等是通过aop(代理)实现的,所以执行buy方法前,就会开启事务。这时候T1,T2是两个事务,当T1执行完后,T2执行,读取不到T1提交的数据,所以会出问题。

	2.2）RC(Read Committed)级别。事务开启后,可以读取到其他事务提交的数据
	         看起来这个级别可以解决上面的问题。T2执行时,可以读取到T1提交的结果。但是问题是,T2执行的时候, T1的事务提交了吗?
	         事务和锁的流程如下：
		开启事务(aop)
		加锁(进入synchronized方法)
		释放锁(退出synchronized方法)
		提交事务(aop)
	         可以看出是先释放锁,再提交事务.所以T2执行查询,可能还是未读到T1提交的数据,还会出问题

	2.3）解决方法：事务开启前加锁，在controller层加锁【相对于事务串行化，很影响性能】

****************************************************************************************************************
2.2 不查询直接更新
（1）实现方法
        SQL语句有数学运算：set blood= （blood- buyQuantity) where id = 1 ，根据返回值判断是否更新成功
（2）问题
        1）不具备通用性,例如add操作
        2）库存操作一般要记录操作前后的数量等,这样没法记录


****************************************************************************************************************
2.3 CAS，乐观锁加版本号
（1）实现方法
        在数据库表中加一个vesion版本控制字段（初始值为0)在更新操作前查询并记录该字段。
        更新之前先查询版本号，更新的时候判断版本号是否一致，如果一致则进行更新，更新操作完成vesion+1；如果不一致则进行重复上面操作。
         对多个更新操作的业务加事物注解（隔离级别位RC）。

（2）注意点
        1）失败重试次数,是否需要限制
        2）失败重试对用户是透明的


****************************************************************************************************************
2.4 使用数据库锁, select xx for update，悲观锁
（1）实现方式
        select xx for update
        线程T1 进行sub , 查询库存剩余 100
        线程T2 进行sub , 这时候,线程T1事务还未提交,线程T2阻塞,直到线程T1事务提交或回滚才能查询出结果.
        所以线程T2查询出的一定是最新的数据.相当于事务串行化了,就解决了数据一致性问题.
（2）注意点
        1) 统一入口：所有库存操作都需要统一使用 select for update ,这样才会阻塞, 如果另外一个方法还是普通的select, 是不会被阻塞的
        2) 加锁顺序：如果有多个锁,那么加锁顺序要一致,否则会出现死锁。



****************************************************************************************************************
2.5使用分布式锁
（1）实现方式
        Redis、Zookeeper
（2）问题
        使用分布式锁和synchronized锁有同样的问题,就是锁和事务的顺序